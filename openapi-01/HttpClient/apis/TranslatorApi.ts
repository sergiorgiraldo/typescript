/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Translator
 * This is a sample translator server. For this sample, you can use the api key `special-key` to test the authorization filters. You can hire a translator and also get translations in your language (dummy :) ).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Translator,
} from '../models/index';
import {
    TranslatorFromJSON,
    TranslatorToJSON,
} from '../models/index';

export interface AddTranslatorRequest {
    translator: Translator;
}

export interface DeleteTranslatorRequest {
    translatorId: number;
    apiKey?: string;
}

export interface FindTranslatorsByLangRequest {
    lang: string;
}

export interface GetTranslatorByIdRequest {
    translatorId: number;
}

/**
 * 
 */
export class TranslatorApi extends runtime.BaseAPI {

    /**
     * 
     * Add a new translator
     */
    async addTranslatorRaw(requestParameters: AddTranslatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Translator>> {
        if (requestParameters['translator'] == null) {
            throw new runtime.RequiredError(
                'translator',
                'Required parameter "translator" was null or undefined when calling addTranslator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("translatorstore_auth", ["write:translator", "read:translator"]);
        }

        const response = await this.request({
            path: `/translator`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranslatorToJSON(requestParameters['translator']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslatorFromJSON(jsonValue));
    }

    /**
     * 
     * Add a new translator
     */
    async addTranslator(requestParameters: AddTranslatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Translator> {
        const response = await this.addTranslatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Deletes a translator
     */
    async deleteTranslatorRaw(requestParameters: DeleteTranslatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['translatorId'] == null) {
            throw new runtime.RequiredError(
                'translatorId',
                'Required parameter "translatorId" was null or undefined when calling deleteTranslator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['apiKey'] != null) {
            headerParameters['api_key'] = String(requestParameters['apiKey']);
        }

        const response = await this.request({
            path: `/translator/{translatorId}`.replace(`{${"translatorId"}}`, encodeURIComponent(String(requestParameters['translatorId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Deletes a translator
     */
    async deleteTranslator(requestParameters: DeleteTranslatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTranslatorRaw(requestParameters, initOverrides);
    }

    /**
     * Find a translator that speaks a given language
     * Finds Translators by lang
     */
    async findTranslatorsByLangRaw(requestParameters: FindTranslatorsByLangRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Translator>>> {
        if (requestParameters['lang'] == null) {
            throw new runtime.RequiredError(
                'lang',
                'Required parameter "lang" was null or undefined when calling findTranslatorsByLang().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("translatorstore_auth", ["read:translator"]);
        }

        const response = await this.request({
            path: `/translator/findByLang`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TranslatorFromJSON));
    }

    /**
     * Find a translator that speaks a given language
     * Finds Translators by lang
     */
    async findTranslatorsByLang(requestParameters: FindTranslatorsByLangRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Translator>> {
        const response = await this.findTranslatorsByLangRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a single translator
     * Find translator by ID
     */
    async getTranslatorByIdRaw(requestParameters: GetTranslatorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Translator>> {
        if (requestParameters['translatorId'] == null) {
            throw new runtime.RequiredError(
                'translatorId',
                'Required parameter "translatorId" was null or undefined when calling getTranslatorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api_key"] = await this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/translator/{translatorId}`.replace(`{${"translatorId"}}`, encodeURIComponent(String(requestParameters['translatorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslatorFromJSON(jsonValue));
    }

    /**
     * Returns a single translator
     * Find translator by ID
     */
    async getTranslatorById(requestParameters: GetTranslatorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Translator> {
        const response = await this.getTranslatorByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
